// Use divide and conquer. select mid, divide given array in equal halves again an again until get single unit. Then compare with adjecent element 
   and swap if first is greater than second and then merge. Do this until get sorted array.

   refer: https://en.wikipedia.org/wiki/Merge_sort
          https://www.geeksforgeeks.org/merge-sort/  

   Time Complexity : O(nlogn) in best/avg/worst = bcz, recursive algo and divide array in equal halves and take linear time to merge
   halves.
   Space Complexity : O(n)
   
   Merge Sort is useful for sorting linked lists. It takes extra space for manipulating input(hence not a inplace algorithm).  
   In linked list, we can insert items in the middle in O(1) extra space and O(1) time. 
   Therefore merge operation of merge sort can be implemented without extra space for linked lists.
   
   
MergeSort(arr[], l,  r)
If r > l
     1. Find the middle point to divide the array into two halves:  
             middle m = (l+r)/2
     2. Call mergeSort for first half:   
             Call mergeSort(arr, l, m)
     3. Call mergeSort for second half:
             Call mergeSort(arr, m+1, r)
     4. Merge the two halves sorted in step 2 and 3:
             Call merge(arr, l, m, r)

void merge(int arr[], int l, int m, int r)
    {
        // Find sizes of two subarrays to be merged
        int n1 = m - l + 1;
        int n2 = r - m;

        /* Create temp arrays */
        int L[] = new int [n1];
        int R[] = new int [n2];

        /*Copy data to temp arrays*/
        for (int i=0; i<n1; ++i)
            L[i] = arr[l + i];
        for (int j=0; j<n2; ++j)
            R[j] = arr[m + 1+ j];


        /* Merge the temp arrays */

        // Initial indexes of first and second subarrays
        int i = 0, j = 0;

        // Initial index of merged subarry array
        int k = l;
        while (i < n1 && j < n2)
        {
            if (L[i] <= R[j])
            {
                arr[k] = L[i];
                i++;
            }
            else
            {
                arr[k] = R[j];
                j++;
            }
            k++;
        }

        /* Copy remaining elements of L[] if any */
        while (i < n1)
        {
            arr[k] = L[i];
            i++;
            k++;
        }

        /* Copy remaining elements of R[] if any */
        while (j < n2)
        {
            arr[k] = R[j];
            j++;
            k++;
        }
    }
    
    
