// divide and conquer. select pivot element randomly(mostly last), then compare each element with pivot take all elements less than pivot on left of pivot 
   and greater on right of pivot. 
   (take cur and i ptr. compare cur with pivot if greater then cur++ else swap cur with i and i++, cur++. when reach to pivot then swap 
    with i now recursively apply this algo on each subarray by selecting pivot again.)
   
   refer: https://en.wikipedia.org/wiki/Quicksort
          https://www.geeksforgeeks.org/in-place-algorithm/
          https://www.geeksforgeeks.org/why-quick-sort-preferred-for-arrays-and-merge-sort-for-linked-lists/
          https://www.geeksforgeeks.org/quick-sort/
          
   Time Complexity: Best/avg - O(nlogn) - when middle element is pivot
                    Worst - O(n^2) - last element pivot and array sorted in increasing or decreasing order
                    
   In-palce algorithm - In-place means that the algorithm does not use extra space for manipulating the input 
   but, may require a small though nonconstant extra space for its operation. e.g bubble, insertion, selection, quick
   quick because, QuickSort uses extra space for recursive function calls and not for manipulating input.

   quick is good for sorting arrays bcz,
   Quick Sort in its general form is an in-place sort (i.e. it doesnâ€™t require any extra storage) 
   whereas merge sort requires O(N) extra storage, N denoting the array size which may be quite expensive.
   Allocating and de-allocating the extra space used for merge sort increases the running time of the algorithm
   For arrays, merge sort loses due to the use of extra O(N) storage space.

quickSort(arr[], low, high)
{
    if (low < high)
    {
        /* pi is partitioning index, arr[p] is now
           at right place */
        pi = partition(arr, low, high);

        quickSort(arr, low, pi - 1);  // Before pi
        quickSort(arr, pi + 1, high); // After pi
    }
}

/* This function takes last element as pivot, places
   the pivot element at its correct position in sorted
    array, and places all smaller (smaller than pivot)
   to left of pivot and all greater elements to right
   of pivot */
partition (arr[], low, high)
{
    // pivot (Element to be placed at right position)
    pivot = arr[high];  
 
    i = (low - 1)  // Index of smaller element

    for (j = low; j <= high- 1; j++)
    {
        // If current element is smaller than or
        // equal to pivot
        if (arr[j] <= pivot)
        {
            i++;    // increment index of smaller element
            swap arr[i] and arr[j]
        }
    }
    swap arr[i + 1] and arr[high])
    return (i + 1)
}
