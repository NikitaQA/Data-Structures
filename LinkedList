linked list applications = 
- All the running applications are kept in a circular linked list and the OS gives 
a fixed time slot to all for running. The Operating System keeps on iterating over the linked list until all 
the applications are completed.
- can be ued for hash table, graphs, stack, queue, etc.
- helps for dynamic memory allocation
- fast insertion and deletion.


// Create Node

class Node{
  public int data;
  public Node next;

  public Node(int data){
  this.data=data;
  this.next=null;
  }  
}

class LinkedList{
  Node head = null;

  // Insert
  public void insert(int data){
    Node temp = new Node(data);
    if(head == null){
      head = temp;
      return;
    }
    Node cur = head;
    while(cur.next != null){
      cur=cur.next;
    }
    cur.next = temp;
    return;
  }

  // Print
  public void print(){
    if(head == null){
      return;
    }
    Node cur = head;
    while(cur.next != null){
      System.out.println(cur.data);
      cur= cur.next;
    }
    System.out.println(cur.data);
  }
  
  // Reverse
  public Node reverse(Node head){
    Node temp;
    Node cur = head;
    Node prev = null;
    while(cur != null){
      temp = cur;
      cur = cur.next;
      temp.next = prev;
      prev = temp;
    }
    return prev;
  }
  
  // Delete
  public void delete(int pos){
    Node temp = head;
    if(pos == 0){
      head = temp.next;
      return;
    }
    for(int i = 0; i<pos-1 && temp != null; i++){
      temp = temp.next;
    }
    if(temp == null && temp.next == null){
      return;
    }
    temp.next = temp.next.next;
  }
  
  // find loop 
  public int detect_loop(){
    Node cur = head;
    Node temp = head;
    while(cur != null, temp != null && temp.next != null){
      cur = cur.next;
      temp = temp.next.next;
      if(cur == temp){
        System.out.println("Found loop");
        return 1;
      }
    }
    return 0;
  }

public static void main(String args[]){
  LinkedList l = new LinkedList();
  l.insert(5);
  l.insert(6);
  l.insert(7);
  l.print();  // 5 6 7
  l.head = l.reverse(l.head);
  l.print();  // 7 6 5
  l.delete(1); // 7 5
  l.head.next = l.head;
  l.detect_loop() // 0
}
}
