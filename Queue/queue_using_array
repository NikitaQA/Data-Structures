applications - one way road in a game app, ticket counter(while buy movie tickets online then first come first serve seat of choice), 
cpu scheduling llike round robin(assign fixed time to all processes,not on priority bases, first finish then next process continues)

class Queue {
  int capacity, front, rear, size;
  int[] a;
  
  public Queue(int capacity){
    this.capacity=capacity;
    this.rear=this.capacity-1;
    this.front=0;
    this.size=0;
    this.a = new int[this.capacity];
  }
  
  public boolean isFull(Queue q){
    if(q.size == q.capacity)
    { 
      return true;
    }
    return false;
  }
  
  public boolean isEmpty(Queue q){
    if(q.size == 0)
    { 
      return true;
    }
    return false;
  }
  
  public void enqueue(int data){
    if(isFull(this)){
      return;
    }
    this.rear = (this.rear+1) % this.capacity;
    a[this.rear] = data;
    size++;
  }
  
  public int dequeue(){
    if(isEmpty(this)){
      return 0;
    }
    int data = a[this.front];
    this.front = (this.front+1) % this.capacity;
    size--;
    return data;
  }
  
  public int front(){
    if (isEmpty(this)) {
       return 0;
    }  
    return this.array[this.front];
  }
       
  public int rear() {
    if (isEmpty(this)){
        return 0;
    }   
    return this.array[this.rear];
  }
  
   public static void main(String[] args) 
    {
        Queue q = new Queue(1000);
           
        q.enqueue(10);
        q.enqueue(20);
        q.enqueue(30);
        q.enqueue(40);
       
        System.out.println(queue.dequeue() + 
                     " dequeued from queue\n");
       
        System.out.println("Front item is " + 
                               queue.front());
          
        System.out.println("Rear item is " + 
                                queue.rear());
    }
  
  
}
